{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,gBAC9BE,KAAMH,SAASC,cAAc,eAC7BG,OAAQJ,SAASC,cAAc,iBAC/BI,UAAWL,SAASC,cAAc,kBAGhCK,EAAQ,KACRC,EAAO,KACPC,EAAS,KAyBb,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUR,MAAAS,IAEpBM,EAAO,CAAEP,WAAUR,MAAAS,MAEpBA,MAhCPb,EAAKC,KAAKoB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBACNf,EAAQgB,OAAOxB,EAAKC,KAAK,GAAGwB,OAC5BhB,EAAOe,OAAOxB,EAAKC,KAAK,GAAGwB,OAC3Bf,EAASc,OAAOxB,EAAKC,KAAK,GAAGwB,OAC7B,IAAK,IAAIC,EAAI,EAAGA,GAAKhB,EAAQgB,GAAK,EAChCf,EAAce,EAAGlB,GACdmB,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUiB,EAAKD,EAALxB,MACjB0B,EAAAhC,GAASiC,OAAOC,QACd,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANJ,EAAM,UAGjDK,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUuB,EAAKP,EAALxB,MAClB0B,EAAAhC,GAASiC,OAAOK,QACd,sBAAqCH,OAAfrB,EAAS,QAAYqB,OAANE,EAAM,UAGjD3B,GAASC,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=delay]'),\n  step: document.querySelector('[name=step]'),\n  amount: document.querySelector('[name=amount]'),\n  submitBtn: document.querySelector('[type=submit]'),\n};\n\nlet delay = null;\nlet step = null;\nlet amount = null;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  delay = Number(refs.form[0].value);\n  step = Number(refs.form[1].value);\n  amount = Number(refs.form[2].value);\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","submitBtn","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","Number","value","i","then","param","delay1","$parcel$interopDefault","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.712aae4f.js.map"}